# Base image: NVIDIA CUDA 11.7 with cuDNN 8
FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive \
    CUDA_HOME=/usr/local/cuda \
    PATH=/usr/local/cuda/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.8 \
    python3-pip \
    python3-dev \
    ffmpeg \
    git \
    wget \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a symbolic link for python
RUN ln -sf /usr/bin/python3.8 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies with CUDA support
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    # Install PyTorch with CUDA support
    pip install --no-cache-dir torch==2.0.1+cu117 torchvision==0.15.2+cu117 --extra-index-url https://download.pytorch.org/whl/cu117 && \
    # Install additional dependencies for GPU support
    pip install --no-cache-dir pynvml>=11.0.0

# Copy the project code
COPY . .

# Install the package in development mode with all optional dependencies
RUN pip install -e ".[all]"

# Create directories for mounted volumes
RUN mkdir -p /app/images /app/results

# Set default environment variables
ENV MODEL_TYPE=cyto \
    EXPORT_FORMATS=overlay,npy,png,yolo \
    USE_GPU=true \
    INPUT_DIR=/app/images \
    OUTPUT_DIR=/app/results

# Set the entrypoint
ENTRYPOINT ["python", "main.py"]

# Add a health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import torch; print(torch.cuda.is_available())" || exit 1